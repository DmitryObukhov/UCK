#!/bin/bash

function failure()
{
	echo "$@"
	exit 1
}

function prepare_install()
{
	apt-get update || failure "apt-get update failed, error=$?"
}

function install_packages()
{
	apt-get install --assume-yes --force-yes "$@" || failure "apt-get install $@ failed, error=$?"
}

function remove_packages()
{
	apt-get --purge remove --assume-yes --force-yes "$@" || failure "apt-get remove $@ failed, error=$?"
}

SCRIPT_DIR=`dirname "$0"`
LIVECD_LANGS=`cat "$SCRIPT_DIR/language_packs"`
RUN_PACKAGE_APP=`cat "$SCRIPT_DIR/run_package_app"`
DESKTOP_TYPE=`cat "$SCRIPT_DIR/desktop_type"`

if [ -z "$LIVECD_LANGS" ]; then
	failure "Live CD language not set, please put language packs codes (for example: en, pl, fr) into $SCRIPT_DIR/language_packs"
fi

DESKTOP_FLAVOURS=`cat "$SCRIPT_DIR/desktop_types"`
if [ -z "$DESKTOP_FLAVOURS" ]; then
	failure "Live CD desktop type not set, please put desktop codes (for example: kde, gnome) into $SCRIPT_DIR/desktop_types"
fi

prepare_install || failure "Preparing installation failed, error=$?"

echo "Installing language packs ($LIVECD_LANGS)..."

PACKAGES_TO_INSTALL=""

LANGPACKS_CONCATENATED=""

for LANGPACK in $LIVECD_LANGS; do
	PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL language-pack-$LANGPACK language-support-$LANGPACK"
	
	for FLAVOUR in $DESKTOP_FLAVOURS; do
		PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL language-pack-$FLAVOUR-$LANGPACK"
	done
	
	if [ -z "$LANGPACKS_CONCATENATED" ]; then
		LANGPACKS_CONCATENATED="$LANGPACK"
	else
		LANGPACKS_CONCATENATED="$LANGPACKS_CONCATENATED|$LANGPACK"
	fi
done

install_packages $PACKAGES_TO_INSTALL || failure "Installing language packs failed, error=$?"

#NOTE: we first install language pack, then remove others as installing language pack might pull packages 
#which were not previously present
echo "Removing unnecessary language packages..."
REMOVED_PACKAGES=`dpkg-query --show | cut -f1 | grep -E '^(language-pack|language-support)' | grep -v -E "[-]($LANGPACKS_CONCATENATED)\>"`
remove_packages $REMOVED_PACKAGES || failure "Removing packages failed, error=$?"

if [ "$RUN_PACKAGE_APP" = "yes" ] ; then
	echo "Mounting pts filesystem..."
	mount -t devpts none /dev/pts || failure "Cannot mount pts filesystem, error=$?"
	
	if [ "$DESKTOP_TYPE" = "kde" ]; then
		WINDOW_MANAGER="kwin"
		PACKAGE_APP=`which adept`
		if [ $? -ne 0 ]; then
			PACKAGE_APP=`which adept_manager`
			if [ $? -ne 0 ]; then
				failure "Cannot find neither adept not adept_manager"
			fi
		fi
		PACKAGE_APP_OPTIONS=(--nofork --caption "UCK Package Manager")
	elif [ "$DESKTOP_TYPE" = "gnome" ]; then
		WINDOW_MANAGER="metacity"
		PACKAGE_APP="synaptic"
		PACKAGE_APP_OPTIONS=(-t "UCK Package manager")
	else
		failure "Unknown desktop type: $DESKTOP_TYPE"
	fi
	
	while true ; do
		echo "Starting package application..."
		$PACKAGE_APP "${PACKAGE_APP_OPTIONS[@]}"
		RESULT=$?
		
		if [ $RESULT -ne 0 ]; then
			echo "Running package application $PACKAGE_APP failed, error=$RESULT, restarting it..."
		else
			break
		fi
	done
	
	umount /dev/pts
fi

echo "Done"
