#!/bin/bash
#
# $Id: customize_root,v 2.1 2010-02-22 09:19:06 wjg Exp $
#
# NAME:
#	customize_root -- customize the root file system
#
# SYNOPSIS:
#	customize_root
#
# DESCRIPTION:
#	This script runs as root in the environment of the future root file
#	system (chrooted to the unpacked root file system), therefore some
#	special rules apply:
#
#	- The only data shared between your current system and the future
#	  root file system is the customization-script directory that gets
#	  copied into /tmp of the target root file system (but is *not*
#	  copied back!).
#
#	Localized project has the following additional parameters
#	(cf. project.uck):
#	LANGUAGE_PACKS -- space separated list of language packs to install
#	DESKTOP_LIST -- space separated list of desktops to install
#	DESKTOP_TYPE -- desktop to run on the Live CD
#	LANGUAGE -- language to run the Live CD in
#
# COPYRIGHT:
#	Copyright Â© 2010, The UCK Team
#
# LICENSE:
#	uckFlow is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	uckFlow is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with uckFlow.  If not, see <http://www.gnu.org/licenses/>.

# Print an error message an exit
failure() { echo "$0: $@" >&2; exit 1; }

# Source environment. Special case customize_root: found in /tmp!
if [ -f "/tmp/customization-scripts/project.uck" ]; then
	. "/tmp/customization-scripts/project.uck"
	UCK_PROJECT_DIR=/tmp
else
	failure "Cannot create UCK environment!"
fi

# Can access all of the variables set in project config now:
PROJECT_DIR="$UCK_PROJECT_DIR"
SCRIPT_DIR="$UCK_PROJECT_DIR/customization-scripts"

prepare_install() {
	# try 2 times to avoid slow proxies failures
	apt-get update || apt-get update ||
		failure "apt-get update failed, error=$?"
}

install_packages() {
	apt-get install --assume-yes --force-yes "$@" ||
		failure "apt-get install $@ failed, error=$?"
}

remove_packages() {
	apt-get --purge remove --assume-yes --force-yes "$@" ||
		failure "apt-get remove $@ failed, error=$?"
}

# Update the package cache
prepare_install ||
	failure "Preparing installation failed, error=$?"

# Work through list of language packs
new=""
if [ -n "$LANGUAGE_PACKS" ]; then
	for lang in $LANGUAGE_PACKS; do
		new="$new language-pack-$lang language-support-$lang"
	
		# Add desktop specific language packs, too
		for dt in $DESKTOP_LIST; do
			case $dt in
			gnome|kde) new="$new language-pack-$dt-$lang";;
			esac
		done
	done
	
	# Install new packages
	echo "Installing language packs ($LANGUAGE_PACKS)..."
	install_packages $new ||
		failure "Installing language packs failed, error=$?"
	
	# NOTE: we first install new language packs, then remove others as
	# installing a language pack might pull packages which were not
	# previously present.
	echo "Removing unnecessary language packages..."
	langregexp=`echo "$LANGUAGE_PACKS" | sed 's/[ 	][ 	]*/|/g'`
	goners=`dpkg-query --show | cut -f1 |
		grep -E '^language(-pack|-support)' |
		grep -v -E "[-]($langregexp)\>"`

	remove_packages $goners ||
		failure "Removing packages failed, error=$?"
fi

# That's all folks!
exit 0
