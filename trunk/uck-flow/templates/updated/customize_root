#!/bin/bash
#
# $Id$
#
# NAME:
#	customize_root -- customize the root file system
#
# SYNOPSIS:
#	customize_root
#
# DESCRIPTION:
#	This script runs as root in the environment of the future root file
#	system (chrooted to the unpacked root file system), therefore some
#	special rules apply:
#
#	- The only data shared between your current system and the future
#	  root file system is the customization-script directory that gets
#	  copied into /tmp of the target root file system (but is *not*
#	  copied back!).
#
# COPYRIGHT:
#	Copyright Â© 2010, The UCK Team
#
# LICENSE:
#	uckFlow is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	uckFlow is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with uckFlow.  If not, see <http://www.gnu.org/licenses/>.

# Print an error message an exit
failure() { echo "$0: $@" >&2; exit 1; }

# Source environment. Special case customize_root: found in /tmp!
if [ -f "/tmp/customization-scripts/project.uck" ]; then
	. "/tmp/customization-scripts/project.uck"
	UCK_PROJECT_DIR=/tmp
else
	failure "Cannot create UCK environment!"
fi

# Can access all of the variables set in project config now:
PROJECT_DIR="$UCK_PROJECT_DIR"
SCRIPT_DIR="$UCK_PROJECT_DIR/customization-scripts"

prepare_update() {
	# try 2 times to avoid slow proxies failures
	apt-get update || apt-get update ||
		failure "apt-get update failed, error=$?"
}

update_packages() {
	# Problematic case in karmic: first upgrade of grup-pc requires
	# manual hitting return twice :-( Thanks to merge_debconf/whiptail/slang
	# this cannot be called without interaction. That same beast also
	# forcibly sets a date in UTC which adversely affects the calling
	# system (double YUC!)
	if apt-get dselect-upgrade --assume-yes --force-yes -s |
	   grep grub-pc >/dev/null 2>&1
	then
		echo "Running forced interactive part of upgrade..."		
		xterm -e apt-get install grub-pc
		echo "Forced interactive part of upgrade done."
	fi
	apt-get dselect-upgrade --assume-yes --force-yes ||
		failure "apt-get upgrade failed, error=$?"
	apt-get autoremove --purge --assume-yes --force-yes ||
		failure "apt-get autoremove failed, error=$?"
	apt-get autoclean --assume-yes --force-yes ||
		failure "apt-get autoclean failed, error=$?"
}

prepare_update || failure "Preparing installation failed, error=$?"
update_packages || failure "Updating packages failed, error=$?"

# Check for upgraded kernel and remove old stuff...
for kernel in `dpkg -l | grep "linux-image-2" | grep "^ii" | awk '{ print $2 }' | sed '$d'`
do
	echo "Removing unused kernel $kernel"
	apt-get remove --assume-yes --force-yes $kernel
done

# Remove configuration for packages that are no longer installed
for package in `dpkg -l | grep "^rc" | awk '{ print $2 }'`
do
	echo "Purging old config for $package..."
	dpkg --purge $package
done

# Upgrading the kernel leaves .old symlinks that are invalid
rm -f /*.old

# Updating debconf leaves rather large backup files...
rm -f /var/cache/debconf/*-old

# Remove backup of old sources.list/keys and cores left by crashes
rm -f /etc/apt/*~ /var/crash/*
