#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# $Id: killtree,v 2.2 2010-02-28 20:30:02 wjg Exp $
#
# NAME:
#	killtree -- kill a whole tree of processes
#
# SYNOPSIS:
#	killtree [-n] [-l] [-s signo] pid
#
# DESCRIPTION:
#	This command kills a process tree - regardless of whether the
#	processes have run setsid or setpgrp - by following the PID PPID
#	chaining.
#
#	Processes are killed from the bottom (usually last started) to the top.
#
#	The default signal used is SIGTERM, but that may be changed by
#	giving the -s signo option.
#
#	The -l option only kills the lowest layer of processes started in
#	the tree (usually the last one started).
#
#	The -n option will not kill the named process itself, but only its
#	descendants.
#
# NOTES:
#	It is not usually a good idea to killtree a parent of the killtree
#	command - the killtree command itself will be terminated before it can
#	do its work!
#
#	Things may change during the time this command runs, i.e. it is quite
#	possible that by the time we want to kill a process the process has
#	already terminated. This kind of error is currently ignored, except
#	for the -l option, which will proceed up the process tree until at
#	least one process was found and the signal delivered.
#
# AUTHOR:
#	Wolf Geldmacher, wolf <at> womaro.ch
#
# COPYRIGHT:
#	GPL V2 or later, see http://www.gnu.org/licenses/
import os
import sys
import getopt
import subprocess

# Parameter default values
lastonly = False		# Kill only the lowest layer of processes.
pidtoo = True			# Kill the process named as argument, too.
signal = 15			# Default signal to send.

# PID to Node mapping
tree = {}
# levels to pid list mapping
levels = {}

class Node():
	"""Class to remember useful information about parent/child
	relationships in a process tree"""
	def __init__(self, ppid, pid):
		if pid == None:
			return
		self.pid = pid
		self.ppid = ppid
		self.children = []
		if not self.pid in tree:
			tree[self.pid] = self
		elif tree[self.pid].ppid == None:
			tree[self.pid].ppid = ppid
		if ppid != None:
			if not self.ppid in tree:
				tree[self.ppid] = Node(None, ppid)
			tree[self.ppid].children.append(pid)

	# Recursive method to mark processes with levels
	def markup(self, level = 0):
		for child in self.children:
			tree[child].markup(level + 1)
		if not level in levels:
			levels[level] = []
		levels[level].append(self.pid)

#	def dump(self):
#		print "pid: {0}, ppid: {1}, children: {2}".format(self.pid,
#			self.ppid, " ".join(self.children))

# Issue a usage message and die
def usage(msg = None):
	if msg != None:
		print >>sys.stderr, "{0}: {1}".format(
			os.path.basename(sys.argv[0]), msg)
	print >>sys.stderr, "Usage: {0} [-l] [-n] [-s signo] pid".format(
		os.path.basename(sys.argv[0]))
	sys.exit(1)

# Issue an error message and die
def fatal(msg):
	print >>sys.stderr, "{0}: {1}".format(
		os.path.basename(sys.argv[0]), msg)
	sys.exit(1)

# Main program
if __name__ == "__main__":
	# Handle options and arguments
	try:
		opts, args = getopt.getopt(sys.argv[1:], "s:ln")
	except getopt.GetoptError:
		usage('Invalid option')

	for opt, optarg in opts:
		if opt == "-s":
			signal = optarg
		elif opt == "-l":
			lastonly = True
		elif opt == "-n":
			pidtoo = False

	# Check sanity
	if len(args) != 1:
		usage('Exactly one pid is required')

	# Create an incore process tree image
	proc = subprocess.Popen(	
		"/bin/ps -eaoppid,pid --no-header | sort -n +1 -2",
		shell = True,
		stdout = subprocess.PIPE)

	for line in proc.stdout:
		ppid, pid = line.split()
		Node(ppid, pid)

	proc.wait()

	# Check to make sure the pid we want to kill is there...
	if not args[0] in tree:
		fatal("No such process {0}".format(args[0]))

	# Markup and determine levels
	tree[args[0]].markup()

	# Bottom-Up, deepest first killing...
	didone = False
	for level in reversed(sorted(levels.keys())):
		if level == 0 and not pidtoo:
			break

		for pid in levels[level]:
			# print "Killing {0} with signal {1}".format(
			# 	int(pid), int(signal))
			try:
				os.kill(int(pid), int(signal))
				didone = True
			except OSError:
				pass
			
		if lastonly and didone:
			break

	# That's all folks!
	sys.exit(0)
